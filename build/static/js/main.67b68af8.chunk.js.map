{"version":3,"sources":["Components/Playlist.js","Youtube.js","App.js","serviceWorker.js","index.js"],"names":["Playlist","props","items","listItems","map","item","className","key","text","icon","onClick","deleteItem","video","url","width","height","position","onEnded","addVideo","controls","playing","Youtube","state","currentItem","handleInput","bind","addItem","e","this","setState","target","value","Date","now","preventDefault","newItem","match","newItems","alert","filteredItems","filter","id","onSubmit","type","placeholder","onChange","Component","library","add","faTrash","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSA2CeA,MAtCf,SAAkBC,GACd,IAAMC,EAAQD,EAAMC,MACdC,EAAYD,EAAME,KAAI,SAAAC,GAExB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC7B,2BAAIF,EAAKG,KAAK,8BACV,kBAAC,IAAD,CACAF,UAAU,UACVG,KAAK,QACLC,QAAU,kBAAMT,EAAMU,WAAWN,EAAKE,cAKlDK,EAAQV,EAAME,KAAI,SAAAC,GAEpB,OAAO,kBAAC,IAAD,CACCC,UAAU,YACVO,IAAMR,EAAKG,KACXM,MAAM,MACNC,OAAO,MACPC,SAAS,WACTC,QAAY,kBAAIhB,EAAMiB,SAASb,EAAKE,MACpCY,UAAU,EACVC,SAAO,OAGnB,OACI,6BACA,yBAAKd,UAAU,SACVH,GAEJS,ICkDMS,E,kDAnFX,WAAYpB,GAAO,IAAD,8BACd,cAAMA,IACDqB,MAAM,CACPpB,MAAM,GACNqB,YAAY,CACRf,KAAK,GACLD,IAAI,KAGZ,EAAKiB,YAAa,EAAKA,YAAYC,KAAjB,gBAClB,EAAKC,QAAS,EAAKA,QAAQD,KAAb,gBACd,EAAKd,WAAY,EAAKA,WAAWc,KAAhB,gBAXH,E,wDAcNE,GACAC,KAAKC,SAAS,CACXN,YAAY,CACZf,KAAKmB,EAAEG,OAAOC,MACdxB,IAAIyB,KAAKC,W,8BAKhBN,GACJA,EAAEO,iBACF,IAAMC,EAASP,KAAKN,MAAMC,YAE1B,GAAkB,KAAfY,EAAQ3B,MAAa2B,EAAQ3B,KAAK4B,MADvB,wHACuC,CACjD,IAAMC,EAAS,GAAD,mBAAKT,KAAKN,MAAMpB,OAAhB,CAAsBiC,IACpCP,KAAKC,SAAS,CACN3B,MAAMmC,EACNd,YAAY,CACZf,KAAK,GACLD,IAAI,WAKZ+B,MAAM,sB,iCAIH/B,GACP,IAAMgC,EAAgBX,KAAKN,MAAMpB,MAAMsC,QAAO,SAAAnC,GAAI,OAC9CA,EAAKE,MAAMA,KACXqB,KAAKC,SAAS,CACV3B,MAAMqC,M,mCAILZ,GACT,IAAMQ,EAASP,KAAKN,MAAMC,YAC1B,GAAkB,KAAfY,EAAQ3B,KAAW,CAClB,IAAM6B,EAAS,GAAD,mBAAKT,KAAKN,MAAMpB,OAAhB,CAAsBiC,IACpCP,KAAKC,SAAS,CACN3B,MAAMmC,EACNd,YAAY,CACZf,KAAK,GACLD,IAAI,S,+BAMhB,OACI,yBAAKD,UAAU,WACX,gCACI,0BAAMmC,GAAG,QAAQC,SAAUd,KAAKF,SAC5B,2BAAOiB,KAAK,OAAOC,YAAY,qBAAqBb,MAAOH,KAAKN,MAAMC,YAAYf,KAAMqC,SAAUjB,KAAKJ,cACvG,4BAAQmB,KAAK,SAASrC,UAAU,UAAhC,OACA,4BAAQA,UAAU,cAAlB,aACA,yBAAKJ,MAAS0B,KAAKN,MAAMpB,OACrB,kBAAC,EAAD,CAAUA,MAAS0B,KAAKN,MAAMpB,MAC1BS,WAAciB,KAAKjB,YADvB,a,GAzENmC,a,eCEtBC,IAAQC,IAAIC,KASGC,MAPf,WACE,OACE,yBAAK5C,UAAU,YACb,kBAAC,EAAD,QCEc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCXNmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.67b68af8.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport ReactPlayer from 'react-player'\r\n\r\nfunction Playlist(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item => \r\n        {\r\n        return <div className=\"list\" key={item.key}>\r\n                  <p>{item.text}<span>\r\n                      <FontAwesomeIcon \r\n                      className=\"faicons\" \r\n                      icon='trash' \r\n                      onClick={ () => props.deleteItem(item.key)}\r\n                      /></span>\r\n                    </p>\r\n               </div>   \r\n            })\r\n    const video = items.map(item =>\r\n        {\r\n        return <ReactPlayer \r\n                className=\"videolist\" \r\n                url= {item.text}\r\n                width=\"50%\" \r\n                height=\"80%\"\r\n                position=\"absolute\"\r\n                onEnded = { ()=>props.addVideo(item.key)}\r\n                controls={true}\r\n                playing />\r\n        })\r\n\r\n    return(\r\n        <div>\r\n        <div className=\"list1\">\r\n            {listItems}\r\n        </div>\r\n        {video}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Playlist","import React, { Component } from 'react'\r\nimport Playlist from './Components/Playlist'\r\n\r\nclass Youtube extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            items:[],\r\n            currentItem:{\r\n                text:'',\r\n                key:'',\r\n            }\r\n        }\r\n        this.handleInput =this.handleInput.bind(this);\r\n        this.addItem =this.addItem.bind(this);\r\n        this.deleteItem =this.deleteItem.bind(this);\r\n    }\r\n\r\n    handleInput(e){\r\n                this.setState({\r\n                   currentItem:{\r\n                   text:e.target.value,\r\n                   key:Date.now()\r\n            }\r\n        })\r\n    }\r\n\r\n    addItem(e){\r\n        e.preventDefault();\r\n        const newItem =this.state.currentItem;\r\n        var pattern = /^(?:https?:\\/\\/)?(?:www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\r\n        if(newItem.text!==\"\" && newItem.text.match(pattern) ){\r\n            const newItems=[...this.state.items,newItem];\r\n            this.setState({\r\n                    items:newItems,\r\n                    currentItem:{\r\n                    text:'',\r\n                    key:''\r\n                }\r\n            })\r\n        }else\r\n        {\r\n            alert('Give Correct url');   \r\n        }\r\n    }\r\n\r\n    deleteItem(key){\r\n        const filteredItems = this.state.items.filter(item =>\r\n            item.key!==key);\r\n            this.setState({\r\n                items:filteredItems\r\n            })\r\n    }\r\n\r\n    addItemVideo(e){\r\n        const newItem =this.state.currentItem;\r\n        if(newItem.text!==\"\" ){\r\n            const newItems=[...this.state.items,newItem];\r\n            this.setState({\r\n                    items:newItems,\r\n                    currentItem:{\r\n                    text:'',\r\n                    key:''\r\n                }\r\n            })}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Youtube\">\r\n                <header>\r\n                    <form id=\"to-do\" onSubmit={this.addItem}>\r\n                        <input type=\"text\" placeholder=\"Enter youtube link\" value={this.state.currentItem.text} onChange={this.handleInput}/>\r\n                        <button type=\"submit\" className=\"button\">Add</button>\r\n                        <button className=\"buttonlist\">Playlists</button>\r\n                        <div items = {this.state.items}>\r\n                            <Playlist items = {this.state.items}\r\n                                deleteItem = {this.deleteItem}\r\n                            > </Playlist>   \r\n                        </div>\r\n                    </form>\r\n                </header>\r\n            </div> \r\n        );\r\n      }\r\n    }\r\n    \r\nexport default Youtube \r\n\r\n\r\n  ","import React from 'react';\nimport './App.css';\nimport Youtube from './Youtube';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faTrash)\n\nfunction App() {\n  return (\n    <div className=\"Youbtube\">\n      <Youtube/>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}